#include <iostream>
#include <cstdlib>

using namespace std;

class Complex
{
private:
    int a;
    int b;
public:
    Complex();
    Complex(int x, int y);
    void setA(int n);
    void setB(int n);
    int getA();
    int getB();
    friend bool equals(Complex c1, Complex c2);
    
    friend Complex operator -(const Complex &c1);
    Complex operator +(Complex &c2);
    friend Complex operator -(const Complex &c1, const Complex &c2);
    friend ostream& operator <<(ostream &out, const Complex &c);
    friend istream& operator >>(istream &in, Complex &c);
};

int main()
{
    Complex comp1;
    cout << "Enter a complex number: " << endl;
    cin >> comp1;
    Complex comp2(1, 3);
    cout << comp2 + comp1 << endl;
    cout << comp2 - comp1 << endl;
    cout << -comp2 << endl;
    return 0;
}

Complex::Complex()
{
    a = 0;
    b = 0;
}

Complex::Complex(int x, int y)
{
    a = x;
    b = y;
}

void Complex::setA(int n)
{
    a = n;
}

void Complex::setB(int n)
{
    b = n;
}

int Complex::getA()
{
    return a;
}

int Complex::getB()
{
    return b;
}

bool equals(Complex c1, Complex c2)
{
    if(c1.a == c2.a && c1.b == c2.b)
    {
        return true;
    }
    else
    {
        return false;
    }
}


Complex operator -(const Complex &c1)
{
    Complex temp(-c1.a, -c1.b);
    return temp;
    
}

Complex Complex::operator +(Complex &c2)
{
    Complex temp(a + c2.getA(), b + c2.getB());
    return temp;
}

Complex operator -(const Complex &c1, const Complex &c2)
{
    Complex temp(c1.a-c2.a, c1.b - c2.b);
    return temp;
}

ostream& operator <<(ostream& out, const Complex &c)
{
    out << c.a << " + " << c.b << "i";
    return out;
}

istream& operator >>(istream &in, Complex &c)
{
    //char d1, d2, d3, d4;
    in >> c.a >> c.b;
    return in;
}